{"ast":null,"code":"import { http, HttpResponse } from 'msw';\nimport { phonePlansByMobile, phonePlansByIMEI } from './phonePlans';\nexport const handlers = [http.post(\"/getCompatiblePlans\", async ({\n  request\n}) => {\n  const payload = await request.json();\n  if (payload.searchType === 'IMEI') {\n    let phonePlans = phonePlansByIMEI.find(plan => plan.imei === payload.searchValue);\n    if (phonePlans) {\n      return HttpResponse.json({\n        plans: phonePlans.plans\n      });\n    } else {\n      return HttpResponse.json({\n        plans: []\n      });\n    }\n  } else {\n    let phonePlans = phonePlansByMobile.find(plan => plan.name.toLowerCase() === payload.searchValue.toLowerCase());\n    if (phonePlans) {\n      return HttpResponse.json({\n        plans: phonePlans.plans\n      });\n    } else {\n      return HttpResponse.json({\n        plans: []\n      });\n    }\n  }\n})];","map":{"version":3,"names":["http","HttpResponse","phonePlansByMobile","phonePlansByIMEI","handlers","post","request","payload","json","searchType","phonePlans","find","plan","imei","searchValue","plans","name","toLowerCase"],"sources":["/Users/shaileshyadav/Desktop/Shailesh/Projects/mobile-plan-compatible/src/mocks/handlers.js"],"sourcesContent":["import { http, HttpResponse } from 'msw'\nimport { phonePlansByMobile, phonePlansByIMEI } from './phonePlans';\n\nexport const handlers = [\n\n  http.post(\"/getCompatiblePlans\", async ({ request }) => {\n\n    const payload = await request.json();\n\n    if (payload.searchType === 'IMEI') {\n      let phonePlans = phonePlansByIMEI.find(plan => plan.imei === payload.searchValue);\n      if (phonePlans) {\n        return HttpResponse.json({\n          plans: phonePlans.plans\n        })\n      } else {\n        return HttpResponse.json({\n          plans: []\n        })\n      }\n    } else {\n      let phonePlans = phonePlansByMobile.find(plan => plan.name.toLowerCase() === payload.searchValue.toLowerCase());\n      if (phonePlans) {\n        return HttpResponse.json({\n          plans: phonePlans.plans\n        })\n      } else {\n        return HttpResponse.json({\n          plans: []\n        })\n      }\n    }\n\n  })\n];\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,YAAY,QAAQ,KAAK;AACxC,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,cAAc;AAEnE,OAAO,MAAMC,QAAQ,GAAG,CAEtBJ,IAAI,CAACK,IAAI,CAAC,qBAAqB,EAAE,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAEtD,MAAMC,OAAO,GAAG,MAAMD,OAAO,CAACE,IAAI,CAAC,CAAC;EAEpC,IAAID,OAAO,CAACE,UAAU,KAAK,MAAM,EAAE;IACjC,IAAIC,UAAU,GAAGP,gBAAgB,CAACQ,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKN,OAAO,CAACO,WAAW,CAAC;IACjF,IAAIJ,UAAU,EAAE;MACd,OAAOT,YAAY,CAACO,IAAI,CAAC;QACvBO,KAAK,EAAEL,UAAU,CAACK;MACpB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,OAAOd,YAAY,CAACO,IAAI,CAAC;QACvBO,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF,CAAC,MAAM;IACL,IAAIL,UAAU,GAAGR,kBAAkB,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACI,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKV,OAAO,CAACO,WAAW,CAACG,WAAW,CAAC,CAAC,CAAC;IAC/G,IAAIP,UAAU,EAAE;MACd,OAAOT,YAAY,CAACO,IAAI,CAAC;QACvBO,KAAK,EAAEL,UAAU,CAACK;MACpB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,OAAOd,YAAY,CAACO,IAAI,CAAC;QACvBO,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF;AAEF,CAAC,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}